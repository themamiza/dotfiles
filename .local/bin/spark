#!/usr/bin/env bash
# License: MIT
# Written by: holman <https://zachholman.com>
# spark: https://github.com/holman/spark

# $1 - The data we'd like to graph.
_echo()
{
  if [ "X$1" = "X-n" ]; then
    shift
    printf "%s" "$*"
  else
    printf "%s\n" "$*"
  fi
}

spark()
{
  local n numbers=

  # find min/max values
  local min=0xffffffff max=0

  for n in ${@//,/ }; do
    n=${n%.*}
    (( n < min )) && min=$n
    (( n > max )) && max=$n
    numbers=$numbers${numbers:+ }$n
  done

  local ticks=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

  # use a high tick if data is constant
  (( min == max )) && ticks=(▅ ▆)

  local f=$(( (($max-$min)<<8)/(${#ticks[@]}-1) ))
  (( f < 1 )) && f=1

  for n in $numbers; do
    _echo -n "${ticks[$(( ((($n-$min)<<8)/$f) ))]}"
  done
  _echo
}
# Prints the help text for spark.
help()
{
  printf "USAGE:\n"
  printf "  spark [-h|--help] VALUE,...\n"
  printf "EXAMPLES:\n"
  printf "  spark 1 5 22 13 53\n"
  printf "%s\n" "▁▁▃▂█"
  printf "  spark 0,30,55,80,33,150\n"
  printf "%s\n" "▁▂▃▄▂█"
  printf "  echo 9 13 5 17 1 | spark\n"
  printf "%s\n" "▄▆▂█▁"
}

# If we're being sourced, don't worry about such things
if [ "$BASH_SOURCE" == "$0" ]; then

  # show help for no arguments if stdin is a terminal
  if { [ -z "$1" ] && [ -t 0 ] ; } || [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
    help
    exit 0
  fi

  spark "${@:-`cat`}"
fi
