#!/bin/bash

program_name="$(basename "$0")"

# These options can only be changed by editing this code.
# TODO: Create a configuration file that these variables are sourced from.
bios_or_uefi="UEFI"        # Set to "BIOS" to install for BIOS systems.
bootloader_id="ArchLinux"  # Only matters when using "UEFI".
efi_directory="/efi"
disk_to_install="/dev/vda" # Only matters when using "BIOS".
aurhelper="paru"

programs_file="programs.csv"
programs_to_install="/tmp/programs.tmp"

eprint(){ printf "%s: %s\n" "$program_name" "$1" >&2; exit 1; }
print_help() {
    printf "Usage: %s [Options]

    Options are sequential meaning they execute in the order you provide them.
    If an option exits the script (such as --help) the other options are not read.

    -h|--help|help                        Print this help message and exit.
    -a|--arch-install|arch-install        Run through installation of ArchLinux.
        --vm|vm                               Pre-Configured partitioning for a virtual machine.
        --main|main                           Pre-Configured partitioning for my main machine.
        --X220|X220|x220                      Pre-Configured partitioning for my Lenovo X220 machine.
        Note: You can also use your own partitioning scheme.
              Make sure you mount your filesystems correctly before installation.
              The script expects these:
              UEFI -> An efi system directory; defaults to '/efi'.
              BIOS -> Should specify disk to be installed -
                          in the script (No option provided); defaults to '/dev/vda'.

    -i|--install-environment|install-environment    Install packages corresponding to specified install-environment.
        Hyprland    Only install packages used in hyprland.
        DWM         Only install packages used in dwm.
        All         Install all packages.
    -p|--install-aurhelper|install-aurhelper        Install AUR helper (Can be one of 'paru/yay': defaults to 'paru')
    -g|--configure-grub|configure-grub              Configure grub. # TODO: Expand on this
    -d|--debug|debug                                Debug options, mainly for testing purposes.
                                                    Some extra functions are available here.    
        -e|--install-essentials|install-essentials      Install essential packages needed to install and
                                                        configure other packages. 
        -u|--update-package-descriptions|update-package-descriptions    Update package descriptions in '%s'.\n" "$program_name" "$programs_file"
}

# label -> label type: dos/gpt
# size  -> measured in sectors; each sector being 512 bytes.
partition_main() {
    echo "NOT IMPLEMENTED!" && exit 1
}

partition_x220() {
    echo "NOT IMPLEMENTED!" && exit 1
}

partition_vm() {
    case "$bios_or_uefi" in
        "UEFI") 
            printf "label: gpt
start=,size=2000000,type=U
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.fat  -F 32 /dev/vda1
        mkfs.ext4 -qF /dev/vda2
        mkfs.ext4 -qF /dev/vda3

        mount /dev/vda2 /mnt
        mount --mkdir /dev/vda1 /mnt/efi
        mount --mkdir /dev/vda3 /mnt/home
        ;;


        "BIOS") printf "label: dos
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.ext4 -qF /dev/vda1
        mkfs.ext4 -qF /dev/vda2

        mount /dev/vda1 /mnt
        mount --mkdir /dev/vda2 /mnt/home
        ;;
    esac
}

# Why do I pass all the variables as arguments? Explained in `arch_install` 
# args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install
arch_install_run_in_chroot() {
    # Renaming vars only for more readability.
    username="$1"
    pass1="$2"
    hostname="$3"
    timezone="$4"
    bios_or_uefi="$5"
    bootloader_id="$6"
    efi_directory="$7"
    disk_to_install="$8"

    ln -sf /usr/bin/nvim /usr/bin/vim
    ln -sf /usr/bin/nvim /usr/bin/vi

    ln -sf "/usr/share/locale/$timezone" /etc/localtime
    hwclock --systohc

    sed -i '/en_US.UTF-8/s/^#//g' /etc/locale.gen
    locale-gen
    printf "LANG=en_US.UTF-8\n" > /etc/locale.conf
    printf "%s\n" "$hostname" > /etc/hostname

    mkinitcpio -P

    case "$bios_or_uefi" in
        "UEFI") grub-install --target=x86_64-efi --efi-directory="$efi_directory" --bootloader-id="$bootloader_id";;
        "BIOS") grub-install --target=i386-pc "$disk_to_install";;
    esac
    grub-mkconfig -o /boot/grub/grub.cfg

    useradd --create-home --groups wheel --shell /bin/bash "$username"
    echo "$username:$pass1" | chpasswd
    unset pass1 pass2

    wheel_can_sudo

    systemctl enable NetworkManager

    # This should be the last thing done.
    date >> /etc/installation.date
}

arch_install() {
    printf "The rest of the installation assumes you have
1. an internet connection (iwctl).
2. synchronized system clock. (timedatectl set-ntp true)
3. configured your filesystem and mounted your root at /mnt (fdisk).\n
SHOULD NOT BE RAN ON AN EXISTING ARCH INSTALLAION!\n\n"
    read -rp "Continue (Y/N): " continue && [[ "$continue" == [yY] ]] || exit 0

    ask_username

    read -rsp "Enter a password for $username: " pass1
    printf "\n"
    read -rsp "Retype password: " pass2
    printf "\n"
    while ! [ "$pass1" = "$pass2" ]; do
        unset pass2
        read -rsp "Passwords do not match. Enter password again: " pass1
        printf "\n"
        read -rsp "Retype password: " pass2
        printf "\n"
    done

    read -rp "Hostname: " hostname
    while ! echo "$hostname" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        printf "Hostname not valid. Give a hostname beginning with a letter, with only lowercase letters, - or _.\n"
        read -rp "Hostname: " hostname
    done

    read -rp "Timezone (Region/City): " timezone
    while ! find /usr/share/zoneinfo | grep -q "$timezone"; do
        printf "Timezone not valid. A valid timezone looks like -> \"US/Eastern\"\n"
        read -rp "Timezone (Region/City): " timezone
    done

    # TODO: Print configuration before installing.

    printf "Checking internet connection...\n"
    curl -sSf http://www.google.com >/dev/null || eprint "Can't reach the web."
    printf "Internet connection is available.\n"

    printf "Bootstraping the system...\n"
    pacstrap -K /mnt base linux-lts linux-firmware grub efibootmgr networkmanager sudo neovim
    printf "Done bootstraping the system.\n"

    genfstab -U /mnt >> /mnt/etc/fstab

    # Exporting the function to later be passed to arch-chroot as a command.
    # That is why all the variables are passed manually.
    # TODO: Investigate if it can be done any other way.
    # arch_install_run_in_chroot() { # -> args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install
    export -f arch_install_run_in_chroot
    arch-chroot /mnt /bin/sh -c "arch_install_run_in_chroot $username $pass1 $hostname $timezone $bios_or_uefi $bootloader_id $efi_directory $disk_to_install"
    unset pass1 pass2
    unset -f arch_install_run_in_chroot
    reboot
}

clean_programs_file() { 
    sed -i 's/[ ]*#.*//g;/^$/d' "$programs_file"
    awk '
        BEGIN {FS = OFS = "\""}
        /^[[:blank:]]*$/ {next}
        {for (i=1; i<=NF; i+=2) gsub (/[[:space:]]/,"",$i)}
        1
    ' "$programs_file" > "$programs_file.tmp" && mv "$programs_file.tmp" "$programs_file"
}

update-package-descriptions() {
    output_file="$programs_file.new"

    # Create or truncate the output file
    : > "$output_file"

    # Read input file line by line
    # Use IFS='|' to split fields by '|'
    while IFS='|' read -r method environment package description; do

    # Check if line is a comment (starts with '#') or empty
    case "$method" in
        \#*|"")
            # Write comment or empty line as-is to the output
            # Preserve the original number of columns
            printf '%s' "$method" >> "$output_file"
            [ -n "$environment" ] && printf '|%s' "$environment" >> "$output_file"
            [ -n "$package" ] && printf '|%s' "$package" >> "$output_file"
            [ -n "$description" ] && printf '|%s' "$description" >> "$output_file"
            printf '\n' >> "$output_file"
            continue
            ;;
    esac

    # Trim spaces from package name (third column)
    pkgname=$(printf '%s' "$package" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')

    # If no package name, set description to N/A
    if [ -z "$pkgname" ]; then
        description="N/A"
    else
        # Query pacman for package description
        description=$(pacman -Si "$pkgname" 2>/dev/null | awk -F': ' '/^Description/ {print $2}' | sed 's/|/ /g')

        # If description not found, set to N/A
        [ -z "$description" ] && description="N/A"
    fi

    # Write updated line to output: method|environment|package|new_description
    printf '%s|%s|%s| "%s."\n' "$method" "$environment" "$package" "$description" >> "$output_file"

    done <"$programs_file"

    printf "Updated package descriptions!\n"
}

install_package() {
    package_info="$(grep "$1" "$programs_file")"

    while IFS="|" read -r method _ _ description; do
        case "$method" in
            "Pacman"|"") pacman_install    "$1" "$description";;
            "AUR")       aur_install       "$1" "$description";;
            "Suckless")  suckless_install  "$1" "$description";;
            "DoomEmacs") doomemacs_install "$1" "$description";;
        esac
    done <<<"$package_info"

}

install_aurhelper() {
    check_installed "$aurhelper" && return 0
    sudo -u "$username" mkdir -p "/home/$username/.local/src"
    sudo -u "$username" git clone --depth 1 --single-branch --no-tags "https://aur.archlinux.org/$aurhelper.git" "/home/$username/.local/src/$aurhelper" ||
        {
            cd "/home/$username/.local/src/$aurhelper" || exit 1
            sudo -u "$username" git pull --force origin master
        }
    cd "/home/$username/.local/src/$aurhelper" || exit 1
    sudo -u "$username" makepkg --noconfirm -si
}

pacman_install() {
    printf "Installing %s :: %s\n" "$1" "$2"
    pacman -S --noconfirm "$1"
}

aur_install() {
    printf "Installing %s :: %s\n" "$1" "$2"
    sudo -u "$username" "$aurhelper" -S --noconfirm "$1"
}

suckless_install() {
    printf "Installing %s :: %s\n" "$1" "$2"
    echo "NOT IMPLEMENTED!"
}

doomemacs_install() {
    printf "Installing %s :: %s\n" "$1" "$2"
    echo "NOT IMPLEMENTED!"
}

install_environment() {
    case "$1" in
        "Hyprland") grep -E "Wayland|Hyprland|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "DWM") grep -E "X11|DWM|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "All"|"") cut -d"|" -f3  "$programs_file" >> "$programs_to_install";;
    esac
    while IFS= read -r program; do
        install_package "$program"
    done <"$programs_to_install"
}

ask_username() {
    read -rp "Username: " username
    while ! echo "$username" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        printf "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _.\n"
        read -rp "Username: " username
    done
}

check_installed() {
    command -v "$1" >/dev/null && return 0
    pacman -Q "$1" >/dev/null 2>&1 && return 0
    return 1
}

wheel_can_sudo() {
    rm -f /etc/sudoers.d/*mais*

    # Remove tmp file and restore normal functionality on exit.
    trap 'rm -f /etc/sudoers.d/mais-tmp;
          echo "%wheel ALL=(ALL:ALL) ALL" >/etc/sudoers.d/00-mais-wheel-can-sudo;
          echo "%wheel ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm" >/etc/sudoers.d/01-mais-cmds-without-password;
          echo "Defaults editor=/usr/bin/nvim" > /etc/sudoers.d/02-mais-visudo-editor;' HUP INT QUIT TERM PWR EXIT ILL

    echo "%wheel ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/mais-tmp
}

install_essentials() {
    for p in "base-devel" "git"; do
        check_installed "$p" || pacman_install "$p" "Installing $p which is required to install and configure other packages."
    done
}

configure-grub() {
    # These configurations need to be done regardless of having swap.
    sed -i "/^GRUB_TIMEOUT=.*$/s/=.*/=3/;/^#GRUB_DISABLE_OS_PROBER=false$/s/#//" /etc/default/grub
    sed -i "/^GRUB_DEFAULT=.*$/s/=.*/=saved/;/^#GRUB_SAVEDEFAULT=true$/s/#//" /etc/default/grub
    sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/ quiet//" /etc/default/grub

    # Enable hibernation only if there is a swap device larger than 8G.
    blkid | grep "TYPE=\"swap\"" | cut -d " " -f1 | sed "s/://" | xargs lsblk -no SIZE | sed "s/\s\+//;s/.$//" | xargs test 8 -le && {
        grep -q resume /etc/mkinitcpio.conf || {
            sed -i "/^HOOKS=(.*)$/s/)$/ resume)/" /etc/mkinitcpio.conf
            mkinitcpio -P
        }
        grep -q resume /etc/default/grub || {
            swapuuid=$(blkid | grep swap | grep -Po " UUID=\".*?\"" | sed "s/ //;s/UUID=//;s/\"//g")
            sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/.$/ resume=UUID=$swapuuid\"/" /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
            unset swapuuid
        }
    }
}

invalid_option() {
    eprint "Invalid option '$1'
Try '$program_name --help' for more information."
}
    
while [[ $# -gt 0 ]]; do
    case "$1" in
        "-h"|"--help"|"help")
            print_help
            shift # Technically no need to shift since we're exiting.
            exit 0
            ;;
        "-a"|"--arch-install"|"arch-install")
            case "$2" in
                "--vm"|"vm") partition_vm; shift;;
                "--main"|"main") partition_main; shift;;
                "--X220"|"X220"|"x220") partition_x220; shift;;
                *) invalid_option "$2";;
            esac
            arch_install
            shift
            exit 0 # Do not check for other arguments.
            ;;
        "-i"|"--install-environment"|"install-environment")
            clean_programs_file
            ask_username
            wheel_can_sudo
            install_essentials
            install_aurhelper
            case "$2" in
                "Hyprland") install_environment "Hyprland"; shift;;
                "DWM") install_environment "DWM"; shift;;
                "All"|"") install_environment "All"; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
        "-p"|"--install-aurhelper"|"install-aurhelper")
            ask_username
            wheel_can_sudo
            install_essentials
            case "$2" in
                "yay")     aurhelper="yay";  install_aurhelper; shift;;
                "paru"|"") aurhelper="paru"; install_aurhelper; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
        "-g"|"--configure-grub"|"configure-grub")
            configure-grub
            shift
            ;;
        "-d"|"--debug"|"debug")
            case "$2" in
                "-e"|"--install-essentials"|"install-essentials") install_essentials; shift;;
                "-u"|"--update-package-descriptions"|"update-package-descriptions") update-package-descriptions; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
            *) invalid_option "$1";;
    esac
done
