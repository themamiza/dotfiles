#!/bin/bash

program_name="$(basename "$0")"

# These options can only be changed by editing this code.
# TODO: Create a configuration file that these variables are sourced from.
bios_or_uefi="UEFI"        # Set to "BIOS" to install for BIOS systems.
bootloader_id="ArchLinux"  # Only matters when using "UEFI".
efi_directory="/efi"
disk_to_install="/dev/vda" # Only matters when using "BIOS".
aurhelper="paru"

# Default script behavior.
verbose=false

dotfiles_url="https://github.com/themamiza/dotfiles"
dotfiles_name="$(basename $dotfiles_url)"
# The script expects a 'programs.csv' file present in the same efi_directory
# TODO: Download the file if not present.
# programs_file_url="https://raw.githubusercontent.com/themamiza/dotfiles/refs/heads/master/programs.csv"

programs_file="programs.csv"
programs_to_install="/tmp/programs.tmp"

nprint() { printf "${BOLD}${BLUE}%s:${RESET} %s\n" "$program_name" "$1"; }
wprint() { printf "${BOLD}${YELLOW}%s:${RESET} %s\n" "$program_name" "$1" >&2; }
eprint() { printf "${BOLD}${RED}%s:${RESET} %s\n" "$program_name" "$1" >&2; exit 1; }
pprint() { printf "${BOLD}%s${RESET}" "$1"; }
print_help() {
    printf "Usage: %s [Options]

    Options are sequential meaning they execute in the order you provide them.
    If an option exits the script (such as --help) the other options are not read.

    -h|--help                               Print this help message and exit.
    -v|--verbose                            Print everything that's happening.
    -c|--color                              Use ANSI escape codes to display colored output.
    -n|--username                           Set username so it won't be asked interactively.
    -H|--hostname                           Set hostname so it won't be asked interactively.
    -a|--arch-install                       Run through installation of ArchLinux.

        vm                                      Pre-Configured partitioning for a virtual machine.
        main                                    Pre-Configured partitioning for my main machine.
        X220|x220                               Pre-Configured partitioning for my Lenovo X220 machine.
        Note: You can also use your own partitioning scheme.
              Make sure you mount your filesystems correctly before installation.
              The script expects these:
              UEFI -> An efi system directory; defaults to '/efi'.
              BIOS -> Should specify disk to be installed -
                          in the script (No option provided); defaults to '/dev/vda'.

    -i|--install-environment                Install packages corresponding to specified install-environment.
        Hyprland                                Only install packages used in hyprland.
        DWM                                     Only install packages used in dwm.
        All                                     Install all packages.
    -u|--install-dotfiles                   Install dotfiles to user's home directory.
    -p|--install-aurhelper                  Install AUR helper (Can be one of 'paru/yay': defaults to 'paru')
    -g|--configure-grub                     Configure grub. # TODO: Expand on this
    -d|--debug                              Debug options, mainly for testing purposes.
        -e|--install-essentials                 Install essential packages needed to install and configure other packages. 
        -u|--update-package-descriptions    Update package descriptions in '%s'.
        -c|--check-installation-environment Checks requirements for running the script.\n" "$program_name" "$programs_file"
}

enable_color() {
    # ANSI escape codes
    if [ -t 1 ]; then
        BOLD='\033[1m'
        RESET='\033[0m'
        BLUE='\033[34m'
        YELLOW='\033[33m'
        RED='\033[31m'
    else
        BOLD=''
        RESET=''
        BLUE=''
        YELLOW=''
        RED=''
    fi
}

# TODO: Make sure device is not mounted before going through the install.
# label -> label type: dos/gpt
# size  -> measured in sectors; each sector being 512 bytes.
partition_main() {
    eprint "Not implemented!"
}

partition_x220() {
    case "$bios_or_uefi" in
        "UEFI")
            printf "label: gpt
start=,size=2000000,type=U
start=,size=64000000
start=,size=416000000
start=,size=,type=S\n" | sfdisk /dev/sda --wipe always
        mkfs.fat  -F 32 /dev/sda1
        mkfs.ext4 -qF /dev/sda2
        mkfs.ext4 -qF /dev/sda3
        mkswap /dev/sda4

        mount /dev/sda2 /mnt
        mount --mkdir /dev/sda1 /mnt/efi
        mount --mkdir /dev/sda3 /mnt/home
        swapon /dev/sda4
        ;;

        "BIOS") printf "label: dos
start=,size=64000000
start=,size=\n" | sfdisk /dev/sda --wipe always
        mkfs.ext4 -qF /dev/sda1
        mkfs.ext4 -qF /dev/sda2

        mount /dev/sda1 /mnt
        mount --mkdir /dev/sda2 /mnt/home
        ;;
    esac
}

partition_vm() {
    case "$bios_or_uefi" in
        "UEFI") 
            printf "label: gpt
start=,size=2000000,type=U
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.fat  -F 32 /dev/vda1
        mkfs.ext4 -qF /dev/vda2
        mkfs.ext4 -qF /dev/vda3

        mount /dev/vda2 /mnt
        mount --mkdir /dev/vda1 /mnt/efi
        mount --mkdir /dev/vda3 /mnt/home
        ;;

        "BIOS") printf "label: dos
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.ext4 -qF /dev/vda1
        mkfs.ext4 -qF /dev/vda2

        mount /dev/vda1 /mnt
        mount --mkdir /dev/vda2 /mnt/home
        ;;
    esac
}

# Why do I pass all the variables as arguments? Explained in `arch_install` 
# args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install
# TODO: Fix `arch_install_run_in_chroot` not executing.
arch_install_run_in_chroot() {
    # Renaming vars only for more readability.
    username="$1"
    pass1="$2"
    hostname="$3"
    timezone="$4"
    bios_or_uefi="$5"
    bootloader_id="$6"
    efi_directory="$7"
    disk_to_install="$8"

    ln -sf /usr/bin/nvim /usr/bin/vim
    ln -sf /usr/bin/nvim /usr/bin/vi

    ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
    hwclock --systohc

    sed -i '/en_US.UTF-8/s/^#//g' /etc/locale.gen
    locale-gen
    printf "LANG=en_US.UTF-8\n" > /etc/locale.conf
    printf "%s\n" "$hostname" > /etc/hostname

    mkinitcpio -P

    case "$bios_or_uefi" in
        "UEFI") grub-install --target=x86_64-efi --efi-directory="$efi_directory" --bootloader-id="$bootloader_id";;
        "BIOS") grub-install --target=i386-pc "$disk_to_install";;
    esac
    grub-mkconfig -o /boot/grub/grub.cfg

    useradd --create-home --groups wheel --shell /bin/bash "$username"
    echo "$username:$pass1" | chpasswd
    unset pass1 pass2

    wheel_can_sudo

    systemctl enable NetworkManager

    # This should be the last thing done.
    date >> /etc/installation.date
}

arch_install() {
    printf "The rest of the installation assumes you have
1. an internet connection (iwctl).
2. synchronized system clock. (timedatectl set-ntp true)
3. configured your filesystem and mounted your root at /mnt (fdisk).\n
SHOULD NOT BE RAN ON AN EXISTING ARCH INSTALLAION!\n\n"
    pprint "Continue (Y/N): " && read -r continue && [[ "$continue" == [yY] ]] || exit 0

    ask_username

    pprint "Enter a password for $username: " && read -rs pass1
    printf "\n"
    pprint "Retype password: " && read -rs pass2
    printf "\n"
    while ! [ "$pass1" = "$pass2" ]; do
        unset pass2
        wprint "Passwords do not match. Enter password again: " && read -rs pass1
        printf "\n"
        pprint "Retype password: " && read -rs pass2
        printf "\n"
    done

    [ -z "$hostname" ] && {
        pprint "Hostname: " && read -r hostname
        while ! echo "$hostname" | grep -q "^[a-z_][a-z0-9_-]*$"; do
            wprint "Hostname not valid. Give a hostname beginning with a letter, with only lowercase letters, - or _."
            pprint "Hostname: " && read -r hostname
        done
    }

    # Change this so it uses fzf for easier access.
    pprint "Timezone (Region/City): " && read -r timezone
    while ! find /usr/share/zoneinfo | grep -q "$timezone"; do
        wprint "Timezone not valid. A valid timezone looks like -> \"US/Eastern\""
        pprint "Timezone (Region/City): " && read -r timezone
    done

    # TODO: Print configuration before installing.

    printf "Checking internet connection...\n"
    check_internet_connection || eprint "Can't reach the web."
    printf "Internet connection is available.\n"

    printf "Bootstraping the system...\n"
    pacstrap -K /mnt base linux-lts linux-firmware grub efibootmgr networkmanager sudo neovim
    printf "Done bootstraping the system.\n"

    genfstab -U /mnt >> /mnt/etc/fstab

    # Exporting the function to later be passed to arch-chroot as a command.
    # That is why all the variables are passed manually.
    # TODO: Investigate if it can be done any other way.
    # arch_install_run_in_chroot() { # -> args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install
    export -f arch_install_run_in_chroot
    arch-chroot /mnt /bin/sh -c "arch_install_run_in_chroot $username $pass1 $hostname $timezone $bios_or_uefi $bootloader_id $efi_directory $disk_to_install"
    unset pass1 pass2
    unset -f arch_install_run_in_chroot
    pprint "The system should be ready to reboot, Continue (Y/N): " && read -r continue && [[ "$continue" == [yY] ]] || exit 0
    reboot
}

clean_programs_file() { 
    sed -i 's/[ ]*#.*//g;/^$/d' "$programs_file"
    awk '
        BEGIN {FS = OFS = "\""}
        /^[[:blank:]]*$/ {next}
        {for (i=1; i<=NF; i+=2) gsub (/[[:space:]]/,"",$i)}
        1
        ' "$programs_file" > "$programs_file.tmp" && mv "$programs_file.tmp" "$programs_file"
}

update_package_descriptions() {
    output_file="$programs_file.new"

    # Create or truncate the output file
    : > "$output_file"

    # Read input file line by line
    # Use IFS='|' to split fields by '|'
    while IFS='|' read -r method environment package description; do

    # Check if line is a comment (starts with '#') or empty
    case "$method" in
        \#*|"")
            # Write comment or empty line as-is to the output
            # Preserve the original number of columns
            printf '%s' "$method" >> "$output_file"
            [ -n "$environment" ] && printf '|%s' "$environment" >> "$output_file"
            [ -n "$package" ] && printf '|%s' "$package" >> "$output_file"
            [ -n "$description" ] && printf '|%s' "$description" >> "$output_file"
            printf '\n' >> "$output_file"
            continue
            ;;
    esac

    # Trim spaces from package name (third column)
    pkgname=$(printf '%s' "$package" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')

    # If no package name, set description to N/A
    if [ -z "$pkgname" ]; then
        description="N/A"
    else
        # Query pacman for package description
        description=$(pacman -Si "$pkgname" 2>/dev/null | awk -F': ' '/^Description/ {print $2}' | sed 's/|/ /g')

        # If description not found, set to N/A
        [ -z "$description" ] && description="N/A"
    fi

    # Write updated line to output: method|environment|package|new_description
    printf '%s|%s|%s| "%s."\n' "$method" "$environment" "$package" "$description" >> "$output_file"

    done <"$programs_file"

    nprint "Updated package descriptions."
}

install_package() {
    package_info="$(grep "$1" "$programs_file")"

    while IFS="|" read -r method _ _ description; do
        case "$method" in
            "Pacman"|"") pacman_install    "$1" "$description";;
            "AUR")       aur_install       "$1" "$description";;
            "Suckless")  suckless_install  "$1" "$description";;
            "DoomEmacs") doomemacs_install "$1" "$description";;
        esac
    done <<<"$package_info"
}

install_aurhelper() {
    check_installed "$aurhelper" && return 0
    sudo -u "$username" mkdir -p "/home/$username/.local/src"
    sudo -u "$username" git clone --depth 1 --single-branch --no-tags "https://aur.archlinux.org/$aurhelper.git" "/home/$username/.local/src/$aurhelper" ||
        {
            cd "/home/$username/.local/src/$aurhelper" || exit 1
            sudo -u "$username" git pull --force origin master
        }
    cd "/home/$username/.local/src/$aurhelper" || exit 1
    sudo -u "$username" makepkg --noconfirm -si
}

pacman_install() {
    if "$verbose"; then
        nprint "Installing $1 :: $2"
        pacman -S --noconfirm "$1"
    else
        pacman -S --noconfirm "$1" >/dev/null 2>&1
    fi
}

aur_install() {
    if "$verbose"; then
        nprint "Installing $1 :: $2"
        sudo -u "$username" "$aurhelper" -S --noconfirm "$1"
    else
        sudo -u "$username" "$aurhelper" -S --noconfirm "$1" >/dev/null 2>&1
    fi
}

suckless_install() {
    eprint "Not implemented!"
}

doomemacs_install() {
    eprint "Not implemented!"
}

install_environment() {
    : > "$programs_to_install"
    case "$1" in
        "Hyprland") grep -E "Wayland|Hyprland|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "DWM") grep -E "X11|DWM|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "All") cut -d"|" -f3  "$programs_file" >> "$programs_to_install";;
    esac
    awk -F'|' '
      {
        original_line = $0
      }
      NF && $1 !~ /^#/ {
        field2 = $2
        gsub(/^[ \t]+|[ \t]+$/, "", field2)
        if (field2 == "") print original_line
      }
    ' "$programs_file" | cut -d"|" -f3 >> "$programs_to_install"

    while IFS= read -r program; do
        install_package "$program"
    done <"$programs_to_install"
}

# TODO: Check if this function is fully verbosified.
install_dotfiles() {
    if "$verbose"; then
        nprint "Installing dotfiles."
        # Mainly for my convenience.
        if [ -d "/home/$username/rp/dotfiles" ]; then
            nprint "Found local dotfiles."
            srcdir="/home/$username/rp/dotfiles/"
        else
            nprint "Cloning remote repository."
            srcdir="/home/$username/.local/src/$dotfiles_name/"
            sudo -u "$username" mkdir -p "/home/$username/.local/src"
            sudo -u "$username" git clone --depth 1 --single-branch --no-tags "$dotfiles_url" "/home/$username/.local/src/$dotfiles_name" ||
                {
                    cd "/home/$username/.local/src/$dotfiles_name" || exit 1
                    sudo -u "$username" git pull --force origin master
                }
            cd "/home/$username/.local/src/$dotfiles_name" || exit 1
        fi

        sudo -u "$username" rsync -a "$srcdir" "/home/$username"
        # Remove extra files
        rm "/home/$username/LICENSE" "/home/$username/README.md" "/home/$username/programs.csv" "/home/$username/mais" 

        rm -rf "/home/$username/.git"
    else
        if [ -d "/home/$username/rp/dotfiles" ]; then
            srcdir="/home/$username/rp/dotfiles/"
        else
            srcdir="/home/$username/.local/src/$dotfiles_name/"
            sudo -u "$username" mkdir -p "/home/$username/.local/src" >/dev/null 2>&1
            sudo -u "$username" git clone --depth 1 --single-branch --no-tags "$dotfiles_url" "/home/$username/.local/src/$dotfiles_name" >/dev/null 2>&1 ||
                {
                    cd "/home/$username/.local/src/$dotfiles_name" >/dev/null 2>&1 || exit 1
                    sudo -u "$username" git pull --force origin master >/dev/null 2>&1
                }
            cd "/home/$username/.local/src/$dotfiles_name" >/dev/null 2>&1 || exit 1
        fi
        sudo -u "$username" rsync -a "$srcdir" "/home/$username" >/dev/null 2>&1

        rm "/home/$username/LICENSE" "/home/$username/README.md" "/home/$username/programs.csv" "/home/$username/mais" >/dev/null 2>&1

        rm -rf "/home/$username/.git" >/dev/null 2>&1
    fi

    if [ ! -L "/home/$username/.bashrc" ] || [ "$(readlink -f "/home/$username/.bashrc")" != "/home/$username/.config/bash/.bashrc" ]; then
        sudo -u "$username" ln -sf "/home/$username/.config/bash/.bashrc"  "/home/$username/.bashrc"
    fi
    if [ ! -L "/home/$username/.zprofile" ] || [ "$(readlink -f "/home/$username/.zprofile")" != "/home/$username/.config/shell/profile" ]; then
        sudo -u "$username" ln -sf "/home/$username/.config/shell/profile" "/home/$username/.zprofile"
    fi
    if [ ! -L "/home/$username/.xprofile" ] || [ "$(readlink -f "/home/$username/.xprofile")" != "/home/$username/.config/x11/.xprofile" ]; then
        sudo -u "$username" ln -sf "/home/$username/.config/x11/xprofile"  "/home/$username/.xprofile"
    fi
}

ask_username() {
    [ -z "$username" ] || return
    pprint "Username: " && read -r username
    while ! echo "$username" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        wprint "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _."
        pprint "Username: " && read -r username
    done
}

check_installed() {
    # Check if a command is available.
    command -v "$1" >/dev/null 2>&1 && return 0
    # Check if a package is available.
    pacman -Q "$1" >/dev/null 2>&1 && return 0
    # Return false otherwise.
    return 1
}

wheel_can_sudo() {
    isRoot
    if "$verbose"; then
        rm -f /etc/sudoers.d/*mais*

        # Remove tmp file and restore normal functionality on exit.
        trap 'rm -f /etc/sudoers.d/mais-tmp;
              echo "%wheel ALL=(ALL:ALL) ALL" >/etc/sudoers.d/00-mais-wheel-can-sudo;
              echo "%wheel ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm" >/etc/sudoers.d/01-mais-cmds-without-password;
              echo "Defaults editor=/usr/bin/nvim" >/etc/sudoers.d/02-mais-visudo-editor;' HUP INT QUIT TERM PWR EXIT ILL

        echo "%wheel ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/mais-tmp
    else
        rm -f /etc/sudoers.d/*mais* >/dev/null 2>&1

        # Remove tmp file and restore normal functionality on exit.
        trap 'rm -f /etc/sudoers.d/mais-tmp >/dev/null 2>&1;
              echo "%wheel ALL=(ALL:ALL) ALL" | tee /etc/sudoers.d/00-mais-wheel-can-sudo >/dev/null 2>&1;
              echo "%wheel ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm" | tee /etc/sudoers.d/01-mais-cmds-without-password >/dev/null 2>&1;
              echo "Defaults editor=/usr/bin/nvim" | tee /etc/sudoers.d/02-mais-visudo-editor >/dev/null 2>&1;' HUP INT QUIT TERM PWR EXIT ILL

        echo "%wheel ALL=(ALL) NOPASSWD: ALL" | tee /etc/sudoers.d/mais-tmp >/dev/null 2>&1
    fi
}

install_essentials() {
    if "$verbose"; then
        nprint "Installing essential programs."
        for p in "base-devel" "git" "rsync"; do
            if check_installed "$p"; then
                nprint "'$p' is already installed."
            else
                pacman_install "$p" "Installing $p which is required to install and configure other packages."
            fi
        done
    else
        for p in "base-devel" "git"; do
            check_installed "$p" || pacman_install "$p" "Installing $p which is required to install and configure other packages."
        done
    fi
}

configure_grub() {
    verbose=false isRoot || eprint "Only root can configure grub."
    if "$verbose"; then
        nprint "Configuring grub options."

        # These configurations need to be done regardless of having swap.
        sed -i "/^GRUB_TIMEOUT=.*$/s/=.*/=3/;/^#GRUB_DISABLE_OS_PROBER=false$/s/#//" /etc/default/grub
        sed -i "/^GRUB_DEFAULT=.*$/s/=.*/=saved/;/^#GRUB_SAVEDEFAULT=true$/s/#//" /etc/default/grub
        sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/ quiet//" /etc/default/grub

        nprint "Checking swap partition."
        # Enable hibernation only if there is a swap device larger than 8G.
        blkid | grep "TYPE=\"swap\"" | cut -d " " -f1 | sed "s/://" | xargs lsblk -no SIZE | sed "s/\s\+//;s/.$//;s/\..*//" | xargs test 8 -le && {
            nprint "Enabling hibernation."
            grep -q resume /etc/mkinitcpio.conf || {
                sed -i "/^HOOKS=(.*)$/s/)$/ resume)/" /etc/mkinitcpio.conf
                mkinitcpio -P
            }
            grep -q resume /etc/default/grub || {
                swapuuid=$(blkid | grep swap | grep -Po " UUID=\".*?\"" | sed "s/ //;s/UUID=//;s/\"//g")
                sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/.$/ resume=UUID=$swapuuid\"/" /etc/default/grub
                grub-mkconfig -o /boot/grub/grub.cfg
                unset swapuuid
            }
        }
    else
        sed -i "/^GRUB_TIMEOUT=.*$/s/=.*/=3/;/^#GRUB_DISABLE_OS_PROBER=false$/s/#//" /etc/default/grub
        sed -i "/^GRUB_DEFAULT=.*$/s/=.*/=saved/;/^#GRUB_SAVEDEFAULT=true$/s/#//" /etc/default/grub
        sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/ quiet//" /etc/default/grub

        blkid | grep "TYPE=\"swap\"" | cut -d " " -f1 | sed "s/://" | xargs lsblk -no SIZE | sed "s/\s\+//;s/.$//;s/\..*//" | xargs test 8 -le && {
            grep -q resume /etc/mkinitcpio.conf || {
                sed -i "/^HOOKS=(.*)$/s/)$/ resume)/" /etc/mkinitcpio.conf
                mkinitcpio -P >/dev/null 2>&1
            }
            grep -q resume /etc/default/grub || {
                swapuuid=$(blkid | grep swap | grep -Po " UUID=\".*?\"" | sed "s/ //;s/UUID=//;s/\"//g")
                sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/.$/ resume=UUID=$swapuuid\"/" /etc/default/grub
                grub-mkconfig -o /boot/grub/grub.cfg >/dev/null 2>&1
                unset swapuuid
            }
        }
     fi
}

check_internet_connection() {
    if "$verbose"; then
        if curl -sSf http://www.google.com >/dev/null; then
            nprint "Internet connection available."
            return 0
        else
            wprint "Can't reach the web."
            return 1
        fi
    else
        curl -sSf http://www.google.com >/dev/null 2>&1 || return 1
    fi
}

isRoot() {
    if "$verbose"; then
        if [ "$(id -u)" == 0 ]; then
            nprint "Running as root."
            return 0
        else
            wprint "Not running as root."
            return 1
        fi
    else
        [ "$(id -u)" == 0 ] && return 0
        return 1
    fi
}

isArch() {
    if "$verbose"; then
        if check_installed "pacman"; then
            nprint "Running ArchLinux."
            return 0
        else
            wprint "Not running ArchLinux."
            return 1
        fi
    else
        check_installed "pacman" && return 0
        return 1
    fi
}

check_installation_environment() {
    verbose=true isArch
    verbose=true isRoot
    verbose=true check_internet_connection
}

invalid_option() {
    eprint "Invalid option '$1'
Try '$program_name --help' for more information."
}
    
while [[ $# -gt 0 ]]; do
    case "$1" in
        "-h"|"--help")
            print_help
            shift # Technically no need to shift since we're exiting.
            exit 0
            ;;
        "-v"|"--verbose")
            # TODO: Complete verbosifing the script. 
            verbose=true
            shift
            ;;
        "-c"|"--color")
            enable_color
            shift
            ;;
        "-n"|"--username")
            [ -z "$2" ] && eprint "You should provide a username."
            username="$2"
            echo "$username" | grep -q "^[a-z_][a-z0-9_-]*$" || eprint "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _."
            shift 2
            ;;
        "-H"|"--hostname")
            [ -z "$2" ] && eprint "You should provide a hostname."
            hostname="$2"
            echo "$hostname" | grep -q "^[a-z_][a-z0-9_-]*$" || eprint "Hostname not valid. Give a hostname beginning with a letter, with only lowercase letters, - or _."
            shift 2
            ;;
        "-a"|"--arch-install")
            case "$2" in
                "vm") partition_vm; shift;;
                "main") partition_main; shift;;
                "X220"|"x220") partition_x220; shift;;
                *) invalid_option "$2";;
            esac
            arch_install
            shift
            exit 0 # Do not check for other arguments.
            ;;
        "-i"|"--install-environment")
            clean_programs_file
            ask_username
            wheel_can_sudo
            install_essentials
            install_aurhelper
            case "$2" in
                "Hyprland") install_environment "Hyprland"; shift;;
                "DWM") install_environment "DWM"; shift;;
                "All"|"") install_environment "All"; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
        "-u"|"--install-dotfiles")
            ask_username
            wheel_can_sudo
            install_essentials
            install_dotfiles
            shift
            ;;
        "-p"|"--install-aurhelper")
            ask_username
            wheel_can_sudo
            install_essentials
            case "$2" in
                "yay")     aurhelper="yay";  install_aurhelper; shift;;
                "paru"|"") aurhelper="paru"; install_aurhelper; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
        "-g"|"--configure-grub")
            configure_grub
            shift
            ;;
        "-d"|"--debug")
            case "$2" in
                "-e"|"--install-essentials") install_essentials; shift;;
                "-u"|"--update-package-descriptions") update_package_descriptions; shift;;
                "-c"|"--check-installation-environment") check_installation_environment; shift;;
                *) invalid_option "$2";;
            esac
            shift
            ;;
            *) invalid_option "$1";;
    esac
done
